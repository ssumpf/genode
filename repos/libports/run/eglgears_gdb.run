set build_components {
	core init
	drivers/timer
	server/nitpicker server/nit_fb
	app/pointer
	test/eglgears
	drivers/framebuffer drivers/input
	lib/mesa/swrast
	server/tcp_terminal
	app/gdb_monitor
	drivers/nic
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

set config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="SIGNAL"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
}

append_if [have_spec sdl] config {
	<start name="fb_sdl">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Input"/>
			<service name="Framebuffer"/>
		</provides>
	</start>}

append_platform_drv_config

append_if [have_spec framebuffer] config {
	<start name="fb_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>}

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start> }

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="nitpicker">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Nitpicker"/></provides>
		<config>
			<domain name="pointer" layer="1" content="client" label="no" origin="pointer" />
			<domain name="default" layer="2" content="client" focus="click" hover="always" />
			<policy label="pointer" domain="pointer"/>
			<default-policy domain="default"/>
		</config>
		<route>
			<service name="Framebuffer"><child name="fb_drv"/></service>
			<service name="Input"><child name="ps2_drv" /></service>
			<any-service><parent/><any-child/></any-service>
		</route>
	</start>
	<start name="pointer">
		<resource name="RAM" quantum="1M"/>
	</start>
	<start name="nit_fb">
		<resource name="RAM" quantum="2M"/>
		<provides><service name="Input"/><service name="Framebuffer"/></provides>
		<route>
			<service name="Nitpicker"><child name="nitpicker" /></service>
			<any-service><parent/></any-service></route>
		<config xpos="300" ypos="100" width="600" height="600" />
	</start>
	<start name="nic_drv">
		<resource name="RAM" quantum="4M"/>
		<provides> <service name="Nic"/> </provides>
	</start>
	<start name="tcp_terminal">
		<resource name="RAM" quantum="2560K"/>
		<provides> <service name="Terminal"/> </provides>
		<config ld_verbose="yes">
			<policy label="gdb_monitor" port="5555"/>
			<libc stdout="/dev/log">
				<vfs> <dir name="dev"> <log/> </dir> </vfs>
			</libc>
		</config>
	</start>
	<start name="gdb_monitor">
		<resource name="RAM" quantum="128M" />
		<config>
			<target name="gears">
				<config ld_verbose="true">
					<libc stdout="/dev/log" stderr="/dev/log">
						<vfs> <dir name="dev"> <log/> </dir> </vfs>
					</libc>
				</config>
			</target>
			<preserve name="RAM" quantum="10M"/>
			<libc stdout="/dev/log" stderr="/dev/log">
				<vfs> <dir name="dev"> <log/> </dir> </vfs>
			</libc>
		</config>
		<route>
			<service name="Framebuffer"><child name="nit_fb"/></service>
			<any-service> <parent /> <any-child/> </any-service>
		</route>
	</start>
</config>
}

install_config $config

set boot_modules {
	core init ld.lib.so timer nitpicker nit_fb
	gears pointer lwip.lib.so libc_pipe.lib.so
	libc_terminal.lib.so gdb_monitor tcp_terminal
	libc.lib.so libm.lib.so pthread.lib.so
	nic_drv
	egl.lib.so mesa-11.lib.so stdcxx.lib.so
	expat.lib.so glapi.lib.so swrast.lib.so
	i965.lib.so drm.lib.so intel_fb.lib.so
}

lappend_if [have_spec       linux] boot_modules fb_sdl
lappend_if [have_spec framebuffer] boot_modules fb_drv
lappend_if [have_spec         ps2] boot_modules ps2_drv
lappend_if [have_spec        i915] boot_modules gallium-i915.lib.so

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args " -m 768 -nographic"
append qemu_args " -net user -redir tcp:5555::5555"
append_if [have_spec x86] qemu_args " -net nic,model=e1000 "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "

set local_port 5555
source ${genode_dir}/repos/ports/run/gdb_monitor.inc

set gdb_target_binary "gears"

# sequence of GDB commands to execute at startup
set gdb_cmds ""
append gdb_cmds "-ex \"target remote 10.0.0.30:$local_port\" "

#append gdb_cmds "-ex \"b main\" "
append gdb_cmds [gdb_main_breakpoint_cmds $gdb_target_binary]


# ask the user for confirmations again
append gdb_cmds {-ex "set interactive-mode auto" }

puts "command: [gdb] bin/$gdb_target_binary $gdb_cmds"

run_genode_until {.*got IP address.*} 50

exec [terminal] -e "[gdb] bin/ld.lib.so $gdb_cmds" &

interact -i [output_spawn_id]

# vi: set ft=tcl :
