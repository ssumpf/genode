diff --git a/src/lib/mesa/src/gallium/drivers/iris/iris_bufmgr.c b/src/lib/mesa/src/gallium/drivers/iris/iris_bufmgr.c
index 3928f57..1849e33 100644
--- a/src/lib/mesa/src/gallium/drivers/iris/iris_bufmgr.c
+++ b/src/lib/mesa/src/gallium/drivers/iris/iris_bufmgr.c
@@ -1302,6 +1302,8 @@ iris_bo_wait(struct iris_bo *bo, int64_t timeout_ns)
    return ret;
 }
 
+struct iris_bufmgr * single_bufmgr = NULL;
+
 static void
 iris_bufmgr_destroy(struct iris_bufmgr *bufmgr)
 {
@@ -1819,7 +1821,8 @@ gem_param(int fd, int name)
 static struct iris_bufmgr *
 iris_bufmgr_create(struct gen_device_info *devinfo, int fd, bool bo_reuse)
 {
-   uint64_t gtt_size = iris_gtt_size(fd);
+//   uint64_t gtt_size = iris_gtt_size(fd);
+   uint64_t gtt_size = 2 * IRIS_MEMZONE_OTHER_START;
    if (gtt_size <= IRIS_MEMZONE_OTHER_START)
       return NULL;
 
@@ -1925,14 +1928,17 @@ iris_bufmgr_unref(struct iris_bufmgr *bufmgr)
 struct iris_bufmgr *
 iris_bufmgr_get_for_fd(struct gen_device_info *devinfo, int fd, bool bo_reuse)
 {
+#if 0
    struct stat st;
 
    if (fstat(fd, &st))
       return NULL;
+#endif
 
    struct iris_bufmgr *bufmgr = NULL;
 
    mtx_lock(&global_bufmgr_list_mutex);
+#if 0
    list_for_each_entry(struct iris_bufmgr, iter_bufmgr, &global_bufmgr_list, link) {
       struct stat iter_st;
       if (fstat(iter_bufmgr->fd, &iter_st))
@@ -1944,7 +1950,13 @@ iris_bufmgr_get_for_fd(struct gen_device_info *devinfo, int fd, bool bo_reuse)
          goto unlock;
       }
    }
+#endif
 
+   if (single_bufmgr) {
+     struct iris_bufmgr * iter_bufmgr = single_bufmgr;
+     bufmgr = iris_bufmgr_ref(iter_bufmgr);
+     goto unlock;
+   } else
    bufmgr = iris_bufmgr_create(devinfo, fd, bo_reuse);
    if (bufmgr)
       list_addtail(&bufmgr->link, &global_bufmgr_list);
