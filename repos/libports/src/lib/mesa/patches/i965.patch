--- a/src/lib/mesa/src/loader/loader.c
--- b/src/lib/mesa/src/loader/loader.c
@@ -473,6 +473,9 @@
 	if (fd == 43) {
 		return "iris";
 	}
+	if (fd == 50) {
+		return "i965";
+	}
    char *driver;
 
    /* Allow an environment variable to force choosing a different driver
--- a/src/lib/mesa/src/mesa/drivers/dri/i965/brw_bufmgr.c
+++ b/src/lib/mesa/src/mesa/drivers/dri/i965/brw_bufmgr.c
@@ -1923,17 +1923,23 @@
    return bufmgr;
 }
 
+static struct brw_bufmgr * single_bufmgr = NULL;
+
 struct brw_bufmgr *
 brw_bufmgr_get_for_fd(struct gen_device_info *devinfo, int fd, bool bo_reuse)
 {
    struct stat st;
 
+printf("%s:%u\n", __func__, __LINE__);
+#if 0
    if (fstat(fd, &st))
       return NULL;
+#endif
 
    struct brw_bufmgr *bufmgr = NULL;
 
    mtx_lock(&global_bufmgr_list_mutex);
+#if 0
    list_for_each_entry(struct brw_bufmgr, iter_bufmgr, &global_bufmgr_list, link) {
       struct stat iter_st;
       if (fstat(iter_bufmgr->fd, &iter_st))
@@ -1945,10 +1951,17 @@
          goto unlock;
       }
    }
+#endif
 
+   if (single_bufmgr) {
+     struct brw_bufmgr * iter_bufmgr = single_bufmgr;
+     bufmgr = brw_bufmgr_ref(iter_bufmgr);
+     goto unlock;
+   } else {
    bufmgr = brw_bufmgr_create(devinfo, fd, bo_reuse);
    if (bufmgr)
       list_addtail(&bufmgr->link, &global_bufmgr_list);
+   }
 
  unlock:
    mtx_unlock(&global_bufmgr_list_mutex);
--- a/src/lib/mesa/src/mesa/drivers/dri/i965/brw_program_binary.c
+++ b/src/lib/mesa/src/mesa/drivers/dri/i965/brw_program_binary.c
@@ -36,6 +36,8 @@
 void
 brw_program_binary_init(unsigned device_id)
 {
+printf("%s:%u -----\n", __func__, __LINE__);
+#if 0
    const struct build_id_note *note =
       build_id_find_nhdr_for_addr(brw_program_binary_init);
    assert(note);
@@ -54,6 +56,7 @@
    _mesa_sha1_update(&ctx, renderer, len);
    _mesa_sha1_update(&ctx, build_id_data(note), build_id_length(note));
    _mesa_sha1_final(&ctx, driver_sha1);
+#endif
 }
 
 void
