assert_spec x86_64

if {[have_include "power_on/qemu"]} {
	puts "\nAudio_in test running on Qemu is not supported.\n"
	exit 0
}

if {[have_spec linux]} {
	puts "\nAudio_in test running on Linux is not supported.\n"
	exit 0
}

# select use of 'Audio_in/Audio_out' or 'Record/Play' sessions
proc use_record_play_sessions { } { return 0 }

# test audio in or audio out
proc audio_out                { } { return 0 }

proc build_targets { } {

	set targets {
		driver/audio/pc
	}

	if {[use_record_play_sessions]} {
		lappend targets server/record_play_mixer test/audio_play lib/vfs
	} else {
		lappend targets test/audio_in test/audio_out test/audio_in
	}
}

proc audio_driver_config_attr { } {

	if {[use_record_play_sessions]} {
		return {report_mixer="yes" record_play="yes"}
	} else {
		return {report_mixer="yes"}
	}
}

build [build_targets]

create_boot_directory

import_from_depot \
	[depot_user]/src/pc_audio

proc record_play_start_nodes { } {

	if {![use_record_play_sessions]} { return "" }

	set config {
		<start name="mixer" priority="-1">
			<resource name="RAM" quantum="2M"/>
			<resource name="CPU" quantum="20"/>
			<binary name="record_play_mixer"/>
			<provides> <service name="Record"/> <service name="Play"/> </provides>
			<config jitter_ms="10">

				<mix name="left">  <play label_suffix="left" /> </mix>
				<mix name="right"> <play label_suffix="right"/> </mix>

				<policy label_suffix="mic_left"   record="left"  volume="1.0"/>
				<policy label_suffix="mic_right"  record="right" volume="1.0"/>
				<policy label_suffix="left"   record="left"  volume="1.0"/>
				<policy label_suffix="right"  record="right" volume="1.0"/>
			</config>
			<route>
				<service name="Report"> <child name="mixer_report_rom"/> </service>
				<service name="Timer">   <child name="timer"/> </service>
				<any-service> <parent/> </any-service>
			</route>
		</start>
	}

	append_if [audio_out] config {
		<start name="test-audio_play">
			<resource name="RAM" quantum="8M"/>
			<config sample_path="sample.f32">
				<vfs> <rom name="sample.f32"/> </vfs>
			</config>
			<route>
				<any-service><parent/><any-child/></any-service>
			</route>
		</start>
	}

	return $config
}

proc audio_in_out_start_nodes { } {

	if {[use_record_play_sessions]} { return "" }

	if {[audio_out]} {
		return {
		<start name="test-audio_out">
			<resource name="RAM" quantum="4M"/>
			<config>
				<filename>sample.f32</filename>
			</config>
			<route>
				<any-service><parent/><any-child/></any-service>
			</route>
		</start>}
	} else {
		return {
		<start name="test-audio_in">
			<resource name="RAM" quantum="8M"/>
			<route>
				<any-service><parent/><any-child/></any-service>
			</route>
		</start>}
	}
}

import_from_depot \
	[depot_user]/src/[base_src] \
	[depot_user]/src/report_rom \
	[depot_user]/src/init \
	[depot_user]/src/acpi \
	[depot_user]/src/pci_decode \
	[depot_user]/src/platform \
	[depot_user]/raw/sof_firmware \
	[depot_user]/src/pc_audio

append config {
<config prio_levels="2">
	<parent-provides>
		<service name="LOG"/>
		<service name="PD"/>
		<service name="CPU"/>
		<service name="ROM"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="IRQ"/>
		<service name="RM"/>
	</parent-provides>

	<default caps="200"/>

	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>

	<start name="timer" priority="0">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Timer"/> </provides>
	</start>

	<start name="drivers_reports" caps="100">
		<binary name="report_rom"/>
		<resource name="RAM" quantum="1M"/>
		<provides>
			<service name="Report"/>
			<service name="ROM"/>
		</provides>
		<config verbose="no">
			<policy label="pci_decode -> system" report="acpi -> acpi"/>
			<policy label="platform -> devices" report="pci_decode -> devices"/>
		</config>
	</start>

	<start name="acpi" caps="350">
		<resource name="RAM" quantum="6M"/>
		<route>
			<service name="Report"> <child name="drivers_reports"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="pci_decode" caps="350">
		<resource name="RAM" quantum="1M"/>
		<route>
			<service name="ROM" label="system"> <child name="drivers_reports"/> </service>
			<service name="Report"> <child name="drivers_reports"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="platform" caps="400" managing_system="yes">
		<resource name="RAM" quantum="4M"/>
		<provides>
			<service name="Platform"/>
		</provides>
		<config>
			<report devices="yes"/>
			<policy label_prefix="pc_audio" info="yes">  <pci class="AUDIO"/> <pci class="HDAUDIO"/> </policy>
		</config>
		<route>
			<service name="ROM" label="devices"> <child name="drivers_reports"/> </service>
			<service name="Report"> <child name="drivers_reports"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="mixer_report_rom">
		<binary name="report_rom"/>
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="yes">
			<default-policy report="audio_drv -> mixer"/>
		</config>
	</start>

	<start name="pc_audio" priority="-1">
		<resource name="RAM" quantum="8M"/>
		<provides>
			<service name="Audio_out"/>
			<service name="Audio_in"/>
		</provides>
		<config } [audio_driver_config_attr] {>

			<!-- playback controls -->
			<control type="bool" id="19" channel="0" name="Master Playback Switch" value="true"/>
			<control type="int"  id="18" channel="0" name="Master Playback Volume" value="75" min="0" max="87"/>
			<control type="int"  id="0"  channel="0" name="Headphone Playback Volume" value="87" min="0" max="87"/>
			<control type="int"  id="0"  channel="1" name="Headphone Playback Volume" value="87" min="0" max="87"/>
			<control type="int"  id="2"  channel="0" name="Speaker Playback Volume" value="87" min="0" max="87"/>
			<control type="int"  id="2"  channel="1" name="Speaker Playback Volume" value="87" min="0" max="87"/>

			<!-- capture controls -->
			<control type="bool" id="13" channel="0" name="Capture Switch" value="true"/>
			<control type="int"  id="12" channel="0" name="Capture Volume" value="63" min="0" max="63"/>
			<control type="int"  id="12" channel="1" name="Capture Volume" value="63" min="0" max="63"/>
			<control type="int"  id="5"  channel="0" name="Headset Mic Playback Volume" value="31" min="0" max="31"/>
			<control type="int"  id="5"  channel="1" name="Headset Mic Playback Volume" value="31" min="0" max="31"/>
			<control type="int"  id="29" channel="0" name="Dmic0 Capture Volume" value="60" min="0" max="70"/>
			<control type="int"  id="29" channel="1" name="Dmic0 Capture Volume" value="60" min="0" max="70"/>
		</config>
		<route>
			<service name="Report"> <child name="mixer_report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
} [record_play_start_nodes] {
} [audio_in_out_start_nodes] {

</config> }

install_config $config

set boot_modules [build_artifacts]

#
# Get sample file
#

if {![file exists bin/sample.f32] && [audio_out]} {
	puts ""
	puts "The sample file is missing. Please take a look at"
	puts "repos/dde_bsd/README, create 'sample.f32' and put"
	puts "the file into './bin' directory."
	puts ""
	exit 1
}

lappend_if [audio_out] boot_modules sample.f32

build_boot_image $boot_modules

run_genode_until forever

# vi: set ft=tcl :
