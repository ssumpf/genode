assert_spec x86

if {[have_include "power_on/qemu"]} {
	puts "\nAudio_in test running on Qemu is not supported.\n"
	exit 0
}

if {[have_spec linux]} {
	puts"\nAudio_in test running on Linux is not supported.\n"
	exit 0
}


#
# Build
#

set build_components {
	core init timer
	drivers/audio/pc
	test/audio_in
	server/report_rom
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

#
# Firmware images
#

import_from_depot [depot_user]/raw/sof_firmware

#
# Config
#

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<any-service> <parent/> <any-child/> </any-service>
	</default-route>
	<default caps="200"/>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>}

append_platform_drv_config

append config {
	<start name="audio_drv">
		<binary name="pc_audio_drv"/>
		<resource name="RAM" quantum="8M"/>
		<provides>
			<service name="Audio_out"/>
			<service name="Audio_in"/>
		</provides>
		<config report_mixer="true">

			<!-- playback controls -->
			<control type="bool" id="19" channel="0" name="Master Playback Switch" value="true"/>
			<control type="int"  id="18" channel="0" name="Master Playback Volume" value="75" min="0" max="87"/>
			<control type="int"  id="0"  channel="0" name="Headphone Playback Volume" value="87" min="0" max="87"/>
			<control type="int"  id="0"  channel="1" name="Headphone Playback Volume" value="87" min="0" max="87"/>
			<control type="int"  id="2"  channel="0" name="Speaker Playback Volume" value="87" min="0" max="87"/>
			<control type="int"  id="2"  channel="1" name="Speaker Playback Volume" value="87" min="0" max="87"/>

			<!-- capture controls -->
			<control type="bool" id="13" channel="0" name="Capture Switch" value="true"/>
			<control type="int"  id="12" channel="0" name="Capture Volume" value="63" min="0" max="63"/>
			<control type="int"  id="12" channel="1" name="Capture Volume" value="63" min="0" max="63"/>
			<control type="int"  id="5"  channel="0" name="Headset Mic Playback Volume" value="31" min="0" max="31"/>
			<control type="int"  id="5"  channel="1" name="Headset Mic Playback Volume" value="31" min="0" max="31"/>
			<control type="int"  id="32" channel="0" name="Dmic0 Capture Volume" value="50" min="0" max="70"/>
			<control type="int"  id="32" channel="1" name="Dmic0 Capture Volume" value="50" min="0" max="70"/>
		</config>
		<route>
			<service name="Report"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
	<start name="report_rom">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config verbose="yes">
			<default-policy report="audio_drv -> mixer"/>
		</config>
	</start>
	<start name="test-audio_in">
		<resource name="RAM" quantum="8M"/>
	</start>
</config>}

install_config $config


#
# Boot modules
#

set boot_modules {
	core ld.lib.so init timer test-audio_in
	report_rom pc_audio_drv
}


append_platform_drv_boot_modules

build_boot_image $boot_modules

run_genode_until forever
