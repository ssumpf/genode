#
# \brief  rudimentary aarch64 virtual-machine monitor interface test
# \author Alexander Boettcher
# \date   2019-06-17
#

#
# To obtain the linux kernel, do the following steps:
# 
# wget https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-4.19.53.tar.xz
# 
# tar -xJf linux-4.19.53.tar.xz
# cd linux-4.19.53
# 
# make O=../build-linux-aarch64 ARCH=arm64 CROSS_COMPILE=/usr/local/genode/tool/current/bin/genode-aarch64- defconfig
# make O=../build-linux-aarch64 ARCH=arm64 CROSS_COMPILE=/usr/local/genode/tool/current/bin/genode-aarch64- -j32
# 
# copy ../build-linux-aarch64/arch/arm64/boot/Image to your build directory in 'bin/linux'
#
#
# To get the dtb (device-tree-binary), you have to compile the file:
# repos/os/src/server/vmm/spec/arm_v8/virt.dts with the dtc compiler:
# dtc repos/os/src/server/vmm/spec/arm_v8/virt.dts > bin/dtb
#

assert_spec arm_64

if { [get_cmd_switch --autopilot] } {
	if {[have_spec hw]} {
	} else {
		puts "\n Run script is not supported on this platform. \n";
		exit 0
	}
}

set build_components {
	core init
	timer
	server/log_terminal
	server/vmm
}
build $build_components
create_boot_directory

install_config {
<config verbose="yes" prio_levels="2">
	<parent-provides>
		<service name="ROM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
		<service name="VM"/>
	</parent-provides>
	<default-route>
		<any-service><parent/><any-child/></any-service>
	</default-route>
	<default caps="100"/>
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
	<start name="log_terminal">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Terminal"/></provides>
	</start>
	<start name="vmm" caps="200" priority="-1">
		<resource name="RAM" quantum="256M"/>
	</start>
</config>
}

set boot_modules {
	core ld.lib.so init
	timer
	log_terminal
	vmm
	linux
	dtb
}
build_boot_image $boot_modules

append qemu_args " -nographic "

run_genode_until forever
